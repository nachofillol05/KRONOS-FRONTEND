{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Spin } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './PrivateRoute.scss';\nconst PrivateRoute = ({\n  children\n}) => {\n  _s();\n  console.log(\"PrivateRoute.jsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  const navigate = useNavigate();\n  const [mailVerified, setMailVerified] = useState(null);\n  useEffect(() => {\n    console.log(\"Token: \", localStorage.getItem('token'));\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log(\"Token is null or empty\");\n      navigate('/');\n    }\n  }, [navigate]);\n  useEffect(() => {\n    const verifyToken = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/verifyToken/', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"token\": localStorage.getItem('token')\n          })\n        });\n        if (response.ok) {\n          fetch('http://127.0.0.1:8000/api/isVerified/', {\n            method: \"GET\",\n            headers: {\n              'Authorization': 'Token ' + localStorage.getItem('token'),\n              'School-ID': sessionStorage.getItem('actual_school')\n            }\n          }).then(response => response.json()).then(data => {\n            setIsAuthenticated(true);\n            setMailVerified(data.user_is_verified);\n            if (data.user_is_verified) {\n              response.json().then(data => {\n                localStorage.setItem('user', true);\n              });\n            } else {\n              setMailVerified(false);\n            }\n          }).catch(error => {\n            console.error('Error:', error);\n          });\n        } else {\n          setIsAuthenticated(false);\n          return navigate('/');\n        }\n      } catch (error) {\n        console.error('Error verifying token:', error);\n        setIsAuthenticated(false);\n        return navigate('/');\n      }\n    };\n    verifyToken();\n  }, [navigate]);\n  if (isAuthenticated === null || mailVerified === null) {\n    return null;\n  }\n  if (isAuthenticated && mailVerified) {\n    return children;\n  } else if (!isAuthenticated) {\n    return navigate('/');\n  } else {\n    return navigate('/mailenviado');\n  }\n};\n_s(PrivateRoute, \"Nd7wXJqTwh/eASQCrycmZc317tU=\", false, function () {\n  return [useNavigate];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Spin","React","useEffect","useState","useNavigate","PrivateRoute","children","_s","console","log","isAuthenticated","setIsAuthenticated","navigate","mailVerified","setMailVerified","localStorage","getItem","token","verifyToken","response","fetch","method","headers","body","JSON","stringify","ok","sessionStorage","then","json","data","user_is_verified","setItem","catch","error","_c","$RefreshReg$"],"sources":["/home/augusto/Escritorio/KRONOS-FRONTEND/Front/react_kronos/src/components/privateRoute/privateRoute.jsx"],"sourcesContent":["import { Spin } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './PrivateRoute.scss'; \n\nconst PrivateRoute = ({ children }) => {\n  console.log(\"PrivateRoute.jsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  const navigate = useNavigate();\n  const [mailVerified, setMailVerified] = useState(null);\n\n  useEffect(() => {\n    console.log(\"Token: \", localStorage.getItem('token'));\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log(\"Token is null or empty\");\n      navigate('/');\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    const verifyToken = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/verifyToken/', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"token\": localStorage.getItem('token'),\n          })\n        });\n        if (response.ok) {\n        fetch('http://127.0.0.1:8000/api/isVerified/', {\n            method: \"GET\",\n            headers: {\n                'Authorization': 'Token ' + localStorage.getItem('token'),\n                'School-ID': sessionStorage.getItem('actual_school'),\n            },\n        }).then(response => response.json())\n            .then(data => {\n                setIsAuthenticated(true);\n                setMailVerified(data.user_is_verified);\n                if(data.user_is_verified){\n                    response.json().then(data => {\n                        localStorage.setItem('user', true);\n                    });\n                } else {\n                  setMailVerified(false);\n                }\n            })\n            .catch(error => {\n                console.error('Error:', error);\n            });\n        } else {\n          setIsAuthenticated(false);\n          return navigate('/');\n        }\n      } catch (error) {\n        console.error('Error verifying token:', error);\n        setIsAuthenticated(false);\n        return navigate('/');\n      }\n    };\n\n    verifyToken();\n  }, [navigate]);\n\n  if (isAuthenticated === null || mailVerified === null) {\n    return (\n      null\n    );\n  }\n\n  if (isAuthenticated && mailVerified) {\n    return children;\n  } else if (!isAuthenticated ) {\n    return navigate('/');\n  } else {\n    return navigate('/mailenviado');\n  }\n};\n\nexport default PrivateRoute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}